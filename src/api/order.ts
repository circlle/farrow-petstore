/**
 * This file was generated by farrow-api
 * Don't modify it manually
 */

import { createApiPipelineWithUrl, ApiInvokeOptions } from 'farrow-api-client'

/**
 * {@label CreateOrderInput}
 */
export type CreateOrderInput = {
  petId: number
}

/**
 * {@label InvalidUser}
 */
export type InvalidUser = {
  type: 'INVALID_USER'
  message: string
}

/**
 * {@label CreateOrderSuccess}
 */
export type CreateOrderSuccess = {
  type: 'CREATE_ORDER_SUCCESS'
  order: {
    id: number
    petId: number
    userId: number
    shipDate: string
    complete: boolean
    status: 'NEW' | 'CONFIRMED' | 'DELETED'
  }
}

/**
 * {@label GetOrderListInput}
 */
export type GetOrderListInput = {
  pageIndex: number | null | undefined
  pageSize: number | null | undefined
}

/**
 * {@label GetOrderListSuccess}
 */
export type GetOrderListSuccess = {
  type: 'GET_ORDER_LIST_SUCCESS'
  list: Order[]
  pagination: Pagination
}

/**
 * {@label GetOrderListUserInvalid}
 */
export type GetOrderListUserInvalid = {
  type: 'USER_NOT_VALID'
  message: string
}

/**
 * {@label Order}
 */
export type Order = {
  id: number
  petId: number
  userId: number
  shipDate: string
  complete: boolean
  user: {
    id: number
    username: string
    email: string | null | undefined
    avatar: string | null | undefined
    createdAt: string
  }
  pet: {
    id: number
    name: string
    price: number
    description: string
    category: Category | null | undefined
    categoryId: number | null | undefined
    photos: PetPhoto[]
    status: 'AVAILABLE' | 'PENDING' | 'SOLD' | null | undefined
  }
  status: 'NEW' | 'CONFIRMED' | 'DELETED'
}

/**
 * {@label Pagination}
 */
export type Pagination = {
  total: number
  count: number
  pageSize: number
  pageIndex: number
}

/**
 * {@label Category}
 */
export type Category = {
  /**
   * @remarks The id of category
   */
  id: number
  /**
   * @remarks The name of category
   */
  name: string
  /**
   * @remarks category description
   */
  description: string
  /**
   * @remarks category photo
   */
  image: string
}

/**
 * {@label PetPhoto}
 */
export type PetPhoto = {
  id: number
  petId: number
  url: string
}

/**
 * {@label ConfirmOrderInput}
 */
export type ConfirmOrderInput = {
  orderId: number
}

/**
 * {@label ConfirmOrderFailed}
 */
export type ConfirmOrderFailed = {
  type: 'CONFIRM_ORDER_FAILED'
  message: string
}

/**
 * {@label ConfirmOrderSuccess}
 */
export type ConfirmOrderSuccess = {
  type: 'CONRIRM_ORDER_SUCCESS'
  order: Order
}

/**
 * {@label DeleteOrderInput}
 */
export type DeleteOrderInput = {
  orderId: number
}

/**
 * {@label DeleteOrderFailed}
 */
export type DeleteOrderFailed = {
  type: 'DELETE_ORDER_FAILED'
  message: string
}

/**
 * {@label DeleteOrderSuccess}
 */
export type DeleteOrderSuccess = {
  type: 'DELETE_ORDER_SUCCESS'
  order: Order
}

/**
 * {@label DeleteOrderForeverInput}
 */
export type DeleteOrderForeverInput = {
  orderId: number
}

/**
 * {@label DeleteOrderForeverFailed}
 */
export type DeleteOrderForeverFailed = {
  type: 'DELETE_ORDER_FOREVER_FAILED'
  message: string
}

/**
 * {@label DeleteOrderForeverSuccess}
 */
export type DeleteOrderForeverSuccess = {
  type: 'DELETE_ORDER_FOREVER_SUCCESS'
}

export const url = 'http://localhost:3003/api/order'

export const apiPipeline = createApiPipelineWithUrl(url)

export const api = {
  /**
   * @remarks create a new order
   */
  createOrder: (input: CreateOrderInput, options?: ApiInvokeOptions) =>
    apiPipeline.invoke({ type: 'Single', path: ['createOrder'], input }, options) as Promise<
      InvalidUser | CreateOrderSuccess
    >,
  /**
   * @remarks get order list
   */
  getOrderList: (input: GetOrderListInput, options?: ApiInvokeOptions) =>
    apiPipeline.invoke({ type: 'Single', path: ['getOrderList'], input }, options) as Promise<
      GetOrderListSuccess | GetOrderListUserInvalid
    >,
  /**
   * @remarks confirm one order
   */
  confirmOrder: (input: ConfirmOrderInput, options?: ApiInvokeOptions) =>
    apiPipeline.invoke({ type: 'Single', path: ['confirmOrder'], input }, options) as Promise<
      ConfirmOrderFailed | ConfirmOrderSuccess
    >,
  /**
   * @remarks delete one order
   */
  deleteOrder: (input: DeleteOrderInput, options?: ApiInvokeOptions) =>
    apiPipeline.invoke({ type: 'Single', path: ['deleteOrder'], input }, options) as Promise<
      DeleteOrderFailed | DeleteOrderSuccess
    >,
  /**
   * @remarks delete one order
   */
  deleteOrderForever: (input: DeleteOrderForeverInput, options?: ApiInvokeOptions) =>
    apiPipeline.invoke({ type: 'Single', path: ['deleteOrderForever'], input }, options) as Promise<
      DeleteOrderForeverFailed | DeleteOrderForeverSuccess
    >,
}
